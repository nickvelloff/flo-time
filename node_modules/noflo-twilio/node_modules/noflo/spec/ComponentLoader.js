var chai, component, loader, path, port, root,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {
  if (!chai) {
    chai = require('chai');
  }
  loader = require('../src/lib/nodejs/ComponentLoader.coffee');
  component = require('../src/lib/Component.coffee');
  port = require('../src/lib/Port.coffee');
  path = require('path');
  root = path.resolve(__dirname, '../');
} else {
  loader = require('noflo/src/lib/ComponentLoader.js');
  component = require('noflo/src/lib/Component.js');
  root = 'noflo';
}

describe('ComponentLoader with no external packages installed', function() {
  var l;
  l = new loader.ComponentLoader(root);
  it('should initially know of no components', function() {
    return chai.expect(l.components).to.be["null"];
  });
  it('should not initially require revalidation', function() {
    return chai.expect(l.revalidate).to.be["false"];
  });
  it('should not have any packages in the checked list', function() {
    return chai.expect(l.checked).to.be.empty;
  });
  it('should be able to read a list of components', function(done) {
    return l.listComponents(function(components) {
      chai.expect(l.components).not.to.be.empty;
      chai.expect(components).to.equal(l.components);
      return done();
    });
  });
  describe('after listing components', function() {
    return it('should have the Graph component registered', function() {
      return chai.expect(l.components.Graph).not.to.be.empty;
    });
  });
  describe('loading the Graph component', function() {
    var instance;
    instance = null;
    it('should be able to load the component', function(done) {
      return l.load('Graph', function(inst) {
        chai.expect(inst).to.be.an('object');
        instance = inst;
        return done();
      });
    });
    it('should contain input ports', function() {
      chai.expect(instance.inPorts).to.be.an('object');
      return chai.expect(instance.inPorts.graph).to.be.an('object');
    });
    it('should have "on" method on the input port', function() {
      return chai.expect(instance.inPorts.graph.on).to.be.a('function');
    });
    it('it should know that Graph is a subgraph', function() {
      return chai.expect(instance.isSubgraph()).to.equal(true);
    });
    it('should know the description for the Graph', function() {
      return chai.expect(instance.description).to.be.a('string');
    });
    return it('should be able to provide an icon for the Graph', function() {
      chai.expect(instance.getIcon()).to.be.a('string');
      return chai.expect(instance.getIcon()).to.equal('sitemap');
    });
  });
  describe('loading the Graph component', function() {
    var instance;
    instance = null;
    it('should be able to load the component', function(done) {
      return l.load('Graph', function(graph) {
        chai.expect(graph).to.be.an('object');
        instance = graph;
        return done();
      });
    });
    return it('should have a reference to the Component Loader\'s baseDir', function() {
      return chai.expect(instance.baseDir).to.equal(l.baseDir);
    });
  });
  return describe('register a component at runtime', function() {
    var Split, instance;
    Split = (function(_super) {
      __extends(Split, _super);

      function Split() {
        this.inPorts = {
          "in": new port.Port
        };
        this.outPorts = {
          out: new port.Port
        };
      }

      return Split;

    })(component.Component);
    instance = null;
    l.libraryIcons.foo = 'star';
    it('should be available in the components list', function() {
      l.components['foo/Split'] = Split;
      return chai.expect(l.components).to.contain.keys(['foo/Split', 'Graph']);
    });
    it('should be able to load the component', function(done) {
      return l.load('foo/Split', function(split) {
        chai.expect(split).to.be.an('object');
        instance = split;
        return done();
      });
    });
    it('should have the correct ports', function() {
      chai.expect(instance.inPorts).to.have.keys(['in']);
      return chai.expect(instance.outPorts).to.have.keys(['out']);
    });
    it('should have inherited its icon from the library', function() {
      return chai.expect(instance.getIcon()).to.equal('star');
    });
    it('should emit an event on icon change', function(done) {
      instance.once('icon', function(newIcon) {
        chai.expect(newIcon).to.equal('smile');
        return done();
      });
      return instance.setIcon('smile');
    });
    it('new instances should still contain the original icon', function(done) {
      return l.load('foo/Split', function(split) {
        chai.expect(split).to.be.an('object');
        chai.expect(split.getIcon()).to.equal('star');
        return done();
      });
    });
    it('after setting an icon for the Component class, new instances should have that', function(done) {
      Split.prototype.icon = 'trophy';
      return l.load('foo/Split', function(split) {
        chai.expect(split).to.be.an('object');
        chai.expect(split.getIcon()).to.equal('trophy');
        return done();
      });
    });
    return it('should not affect the original instance', function() {
      return chai.expect(instance.getIcon()).to.equal('smile');
    });
  });
});
