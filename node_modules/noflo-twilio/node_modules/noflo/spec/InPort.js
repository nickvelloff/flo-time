var chai, inport, socket;

if (!chai) {
  chai = require('chai');
}

if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {
  inport = require('../src/lib/InPort');
  socket = require('../src/lib/InternalSocket');
} else {
  inport = require('noflo/src/lib/InPort.js');
  socket = require('noflo/src/lib/InternalSocket.js');
}

describe('Inport Port', function() {
  describe('with default options', function() {
    var p;
    p = new inport;
    it('should be of datatype "all"', function() {
      return chai.expect(p.getDataType()).to.equal('all');
    });
    it('should be required', function() {
      return chai.expect(p.isRequired()).to.equal(true);
    });
    it('should not be addressable', function() {
      return chai.expect(p.isAddressable()).to.equal(false);
    });
    return it('should not be buffered', function() {
      return chai.expect(p.isBuffered()).to.equal(false);
    });
  });
  describe('with custom type', function() {
    var p;
    p = new inport({
      datatype: 'string',
      type: 'text/url'
    });
    return it('should retain the type', function() {
      chai.expect(p.getDataType()).to.equal('string');
      return chai.expect(p.options.type).to.equal('text/url');
    });
  });
  return describe('without attached sockets', function() {
    var p;
    p = new inport;
    it('should not be attached', function() {
      return chai.expect(p.isAttached()).to.equal(false);
    });
    it('should allow attaching', function() {
      return chai.expect(p.canAttach()).to.equal(true);
    });
    it('should not be connected initially', function() {
      return chai.expect(p.isConnected()).to.equal(false);
    });
    return it('should not contain a socket initially', function() {
      return chai.expect(p.sockets.length).to.equal(0);
    });
  });
});
