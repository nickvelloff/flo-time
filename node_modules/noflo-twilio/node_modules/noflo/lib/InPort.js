(function() {
  var BasePort, InPort,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BasePort = require('./BasePort');

  InPort = (function(_super) {
    __extends(InPort, _super);

    function InPort(options, process) {
      this.process = null;
      if (!process && typeof options === 'function') {
        process = options;
        options = {};
      }
      if (options && options.buffered === void 0) {
        options.buffered = false;
      }
      if (process) {
        if (typeof process !== 'function') {
          throw new Error('process must be a function');
        }
        this.process = process;
      }
      InPort.__super__.constructor.call(this, options);
    }

    InPort.prototype.attachSocket = function(socket, localId) {
      var _this = this;
      if (localId == null) {
        localId = null;
      }
      socket.on('connect', function() {
        return _this.handleSocketEvent('connect', socket, localId);
      });
      socket.on('begingroup', function(group) {
        return _this.handleSocketEvent('begingroup', group, localId);
      });
      socket.on('data', function(data) {
        return _this.handleSocketEvent('data', data, localId);
      });
      socket.on('endgroup', function(group) {
        return _this.handleSocketEvent('endgroup', group, localId);
      });
      return socket.on('disconnect', function() {
        return _this.handleSocketEvent('disconnect', socket, localId);
      });
    };

    InPort.prototype.handleSocketEvent = function(event, payload, id) {
      if (this.process) {
        if (this.isAddressable()) {
          this.process(event, payload, id, this.nodeInstance);
        } else {
          this.process(event, payload, this.nodeInstance);
        }
      }
      if (this.isAddressable()) {
        return this.emit(event, payload, id);
      }
      return this.emit(event, payload);
    };

    return InPort;

  })(BasePort);

  module.exports = InPort;

}).call(this);
