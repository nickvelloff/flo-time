(function() {
  var BaseTransport, protocols;

  protocols = {
    Runtime: require('./protocol/Runtime'),
    Graph: require('./protocol/Graph'),
    Network: require('./protocol/Network'),
    Component: require('./protocol/Component')
  };

  BaseTransport = (function() {
    function BaseTransport(options) {
      var path;
      this.options = options;
      if (!this.options) {
        this.options = {};
      }
      this.version = '0.4';
      this.component = new protocols.Component(this);
      this.graph = new protocols.Graph(this);
      this.network = new protocols.Network(this);
      this.runtime = new protocols.Runtime(this);
      this.context = null;
      if (this.options.defaultGraph != null) {
        this.options.defaultGraph.baseDir = this.options.baseDir;
        path = 'default/main';
        this.context = 'none';
        this.graph.registerGraph(path, this.options.defaultGraph);
        this.network.initNetwork(this.options.defaultGraph, {
          graph: path
        }, this.context);
      }
      if ((this.options.captureOutput != null) && this.options.captureOutput) {
        this.startCapture();
      }
    }

    BaseTransport.prototype.send = function(protocol, topic, payload, context) {};

    BaseTransport.prototype.sendAll = function(protocol, topic, payload, context) {};

    BaseTransport.prototype.receive = function(protocol, topic, payload, context) {
      this.context = context;
      switch (protocol) {
        case 'runtime':
          return this.runtime.receive(topic, payload, context);
        case 'graph':
          return this.graph.receive(topic, payload, context);
        case 'network':
          return this.network.receive(topic, payload, context);
        case 'component':
          return this.component.receive(topic, payload, context);
      }
    };

    return BaseTransport;

  })();

  module.exports = BaseTransport;

}).call(this);
