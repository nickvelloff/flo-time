var RemoteSubGraph, chai, direct, noflo,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

noflo = require('noflo');

if (noflo.isBrowser()) {
  direct = require('noflo-runtime-base/direct');
} else {
  if (!chai) {
    chai = require('chai');
  }
  direct = require('../src/direct');
}

describe('Component protocol', function() {
  var client, runtime;
  runtime = null;
  client = null;
  beforeEach(function() {
    runtime = new direct.Runtime;
    client = new direct.Client(runtime);
    return client.connect();
  });
  afterEach(function() {
    client.disconnect();
    client = null;
    return runtime = null;
  });
  return describe('changing ports of component on ready', function() {});
});

noflo = require('noflo');

RemoteSubGraph = (function(_super) {
  __extends(RemoteSubGraph, _super);

  function RemoteSubGraph(metadata) {
    if (!metadata) {
      metadata = {};
    }
    this.runtime = null;
    this.ready = true;
    this.inPorts = new noflo.InPorts;
    this.outPorts = new noflo.OutPorts;
  }

  RemoteSubGraph.prototype.isReady = function() {
    return this.ready;
  };

  RemoteSubGraph.prototype.setReady = function(ready) {
    this.ready = ready;
    if (ready) {
      return this.emit('ready');
    }
  };

  RemoteSubGraph.prototype.setNewPorts = function(definition) {
    this.setReady(false);
    this.description = this.inPorts.add(name, {}, (function(_this) {
      return function(event, packet) {};
    })(this));
    return this.setReady(true);
  };

  return RemoteSubGraph;

})(noflo.Component);

exports.RemoteSubGraph = RemoteSubGraph;

exports.getComponent = function(metadata) {
  return new RemoteSubGraph(metadata);
};
